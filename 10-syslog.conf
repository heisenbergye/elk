filter {
    if [type] == "syslog" {
# first try to parse a message as if its a structured one. 
# in the junos universe structured log means it looks like "syslog-header+[someword@numbers + several key=values pairs] 
# <190>1 2018-01-11T11:34:54.174+04:00 jun210 mgd 95763 UI_CMDLINE_READ_LINE [junos@2636.1.1.1.2.36 username="nryzhkov" command="show configuration routing-options "]
        grok {
            match => { "message" => "<%{POSINT:syslog_pri}>(\d{1,3}\s)?(?:%{TIMESTAMP_ISO8601:timestamp})\s%{SYSLOGHOST:syslog_hostname}\s%{PROG:syslog_program}\s(?:%{POSINT:syslog_pid}|-)?\s%{WORD:log_type}\s\[.+?\s%{GREEDYDATA:kvmessage}\]" }
            add_tag => [ "_junos_structured_syslog" ]
        }
# if grok filter has failed then probably we have an unstructured syslog message
# so will try to apply a legacy filter for such a message 
        if "_grokparsefailure" in [ tags ] {
            grok {
                match => { "message" => "<%{POSINT:syslog_pri}>(\d{1,3}\s)?(?:%{TIMESTAMP_ISO8601:timestamp})\s%{SYSLOGHOST:syslog_hostname}\s(/)?(?:%{WORD:syslog_program}|-)\s(?:%{POSINT:syslog_pid}|-)\s-\s-\s%{GREEDYDATA:message}" }
                add_tag => [ "_junos_unstructured_syslog" ]
            }
        }
        else {
# add some custom tags
            if [message] =~ "RT_FLOW_SESSION" {
                mutate {
                    add_tag => [ "RT_FLOW" ]
                }
            }
            if [message] =~ "APPTRACK_SESSION" {
                mutate {
                    add_tag => [ "APPTRACK" ]
                }
            }

# parsing structured data (key=value) by the kv plugin
            kv {
                source => "kvmessage"
                    trim_value => "\""
                    remove_field => [ "kvmessage" ]
                    remove_field => [ "message" ]                    
            }

# convert some fields from the default type (string) to Int
            if [bytes-from-client]{
                mutate {
                    convert => { "bytes-from-client" => "integer" }                                                  
                }
            }
            if [bytes-from-server]{
                mutate {
                    convert => { "bytes-from-server" => "integer" }                    
                }
            }
            if [packets-from-client]{
                mutate {
                    convert => { "packets-from-client" => "integer" }                    
                }
            }
            if [packets-from-server]{
                mutate {
                    convert => { "packets-from-server" => "integer" }                    
                }
            }
            if [elapsed-time]{
                mutate {
                    convert => { "elapsed-time" => "integer" }                    
                }
            }
# geoIP
            geoip {
                source => "destination-address"
                    add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                    add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
            }
            mutate {
                convert => [ "[geoip][coordinates]", "float"]
            }
        }
    }
}
