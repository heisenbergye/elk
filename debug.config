input {
  stdin {
    type => "syslog"
    id => "syslog1"
  }
}

filter {
    if [type] == "syslog" {
# first try to parse a message as if its a structured one so we try to grab a header and a structured data (key=value) format
        grok {
            match => { "message" => "<%{POSINT:syslog_pri}>(\d{1,3}\s)?(?:%{SYSLOGTIMESTAMP:timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) %{SYSLOGHOST:syslog_hostname}\s%{PROG:syslog_program}\s(?:%{POSINT:syslog_pid}|-)?\s%{WORD:log_type}\s\[.+?\s%{GREEDYDATA:kvmessage}\]" }
            add_tag => [ "_debug_1" ]
        }

# if grok filter has failed then probably we have an unstructured syslog message
# so will try to apply a legacy filter for such messages 
        if "_grokparsefailure" in [ tags ] {
            grok {
                match => { "message" => "<%{POSINT:syslog_pri}>(\d{1,3}\s)?(?:%{SYSLOGTIMESTAMP:timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{GREEDYDATA:message}" }
#                add_field => [ "received_from", "%{host}" ]
                add_tag => [ "SYSLOG" ]
            }

        }
        else 
        {
# add some custom tags
            if [message] =~ "RT_FLOW_SESSION" {
                mutate {
                    add_tag => [ "RT_FLOW" ]
                }
            }
            if [message] =~ "APPTRACK_SESSION" {
                mutate {
                    add_tag => [ "APPTRACK" ]
                }
            }


# parsing structured data (key=value) by the kv plugin
            kv {
                source => "kvmessage"
                    trim_value => "\""
                    remove_field => [ "kvmessage" ]
                    remove_field => [ "message" ]
                    add_tag => [ "_debug_kv" ]
            }

            #if ["bytes-from-client"]{
                mutate {
                    convert => { "bytes-from-client" => "integer" }
                    add_tag => ["_debug_mutate1"]
                }
            #}
            #if ["bytes-from-server"]{
                mutate {
                    convert => { "bytes-from-server" => "integer" }
                    add_tag => ["_debug_mutate2"]
                }
            #}
#           # now format some fields (counters) from String to INT using ruby filters
#           ruby{
#               code => "
#                   event.to_hash.keys.each { |k|
#                       if event.get(k).is_a?(String) and k.start_with?('cnt_')
#                           i = event.get(k).to_i
#                           event.set(k, i) 
#                       end
#                   }"
#           }

        }

        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
    }
}

output {
  stdout {}
}

